// 
// Generated by @himenon/openapi-typescript-code-generator v0.13.2
// 
// OpenApi : 3.0.1
// 
// 


import { Schemas } from "./types";
export interface Response$GetWeatherForecast$Status$200 {
    "text/plain": Schemas.WeatherForecast[];
    "application/json": Schemas.WeatherForecast[];
    "text/json": Schemas.WeatherForecast[];
}
export type ResponseContentType$GetWeatherForecast = keyof Response$GetWeatherForecast$Status$200;
export interface Params$GetWeatherForecast<U extends ResponseContentType$GetWeatherForecast> {
    headers: {
        Accept: U;
    };
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$GetWeatherForecast$Status$200;
export namespace ErrorResponse {
    export type GetWeatherForecast = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    public async GetWeatherForecast<ResponseContentType extends ResponseContentType$GetWeatherForecast>(params: Params$GetWeatherForecast<ResponseContentType>, option?: RequestOption): Promise<Response$GetWeatherForecast$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/WeatherForecast`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
}
